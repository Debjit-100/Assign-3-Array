To find unique quadruplets in the given array nums such that their sum is equal to the target, we can use a combination of two-pointer technique and nested loops.

Here's a step-by-step approach to solve this problem:

Sort the nums array in non-decreasing order.

Initialize an empty list result to store the unique quadruplets.

Iterate over each element num1 in the nums array up to the third-to-last element.

If the current element num1 is equal to the previous element, continue to the next iteration to avoid duplicates.

Iterate over each element num2 in the nums array starting from the next element after num1 up to the second-to-last element.

If the current element num2 is equal to the previous element, continue to the next iteration to avoid duplicates.

Initialize two pointers, left and right, as the next element after num2 and the last element in the array, respectively.

While left is less than right, do the following:

Calculate the sum of the four elements: sum = num1 + num2 + nums[left] + nums[right].
If the sum is equal to the target, append the quadruplet [num1, num2, nums[left], nums[right]] to the result list.
If the sum is greater than the target, decrement right by 1 to decrease the sum.
If the sum is less than the target, increment left by 1 to increase the sum.
After the inner loop finishes, increment both left and right by 1, skipping duplicates, to search for the next quadruplet.

After the outer loops finish, return the result list containing all the unique quadruplets.

Here's the implementation in Python:


def fourSum(nums, target):
    nums.sort()
    result = []
    n = len(nums)
    
    for i in range(n - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        for j in range(i + 1, n - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue
            left = j + 1
            right = n - 1
            while left < right:
                curr_sum = nums[i] + nums[j] + nums[left] + nums[right]
                if curr_sum == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1
                    left += 1
                    right -= 1
                elif curr_sum < target:
                    left += 1
                else:
                    right -= 1
    return result
Let's test the function with the given example:


nums = [1, 0, -1, 0, -2, 2]
target = 0
result = fourSum(nums, target)
print(result)  # Output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]
The function returns [[ -2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]], which is the correct output for the given example. These are the unique quadruplets in the nums array such that their sum is equal to the target.
