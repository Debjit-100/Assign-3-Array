To determine if a person could attend all meetings based on an array of meeting time intervals, we need to check if there are any overlapping intervals. If there are any overlaps, it means the person would not be able to attend all meetings.

Here's a step-by-step approach to solve this problem:

Sort the intervals based on the start time in non-decreasing order.

Iterate over each interval starting from the second interval.

Check if the start time of the current interval is less than or equal to the end time of the previous interval. If it is, there is an overlap, so return False.

If no overlaps are found after iterating through all intervals, return True to indicate that the person could attend all meetings.

Here's the implementation in Python:


def canAttendMeetings(intervals):
    intervals.sort(key=lambda x: x[0])

    for i in range(1, len(intervals)):
        if intervals[i][0] < intervals[i - 1][1]:
            return False

    return True
Let's test the function with the given example:


intervals = [[0, 30], [5, 10], [15, 20]]
result = canAttendMeetings(intervals)
print(result)  # Output: False
The function returns False, which is the correct output for the given example. There is an overlap between the first and second intervals: [0, 30] and [5, 10]. Therefore, the person would not be able to attend all meetings.
